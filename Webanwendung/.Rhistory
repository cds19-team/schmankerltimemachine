get_foods <- function(x) {
get_entries <- function(x) {
entries <- xml_text(xml_find_all(x, "./d1:name/text()"))
if (length(entries) > 0) {
prices <- xml_find_first(x, "./d1:Preis/text()") %>%
xml_text() %>% rep(length(.))
entries <- tibble(entries, prices) %>%
t() %>% as.vector()
return(entries)
}
}
foods <- xml_find_all(x, "./d1:Eintrag") %>%
map(get_entries) %>% unlist()
if (length(foods) > 0) {
foods <- matrix(foods, ncol = 2, byrow = TRUE)
colnames(foods) <- c("entry", "price")
foods <- as_tibble(foods)
}
return(foods)
}
x_path <- ".//d1:l[contains(@facs, '#%s_')]"
x_path <- sprintf(x_path, facs_id)
values <- xml_find_all(data, x_path)
foods <- map(values, get_foods)
texts <- get_texts(values, "./text()")
x_path <- "./d1:Kategorie/text()"
categories <- get_texts(values, x_path)
count <- map(foods, nrow) %>% map(function(x)
ifelse(is.null(x), 0, x)) %>% unlist()
if (sum(count) > 0) {
foods <- foods %>%
discard(count == 0) %>% bind_rows() %>%
mutate(rid = rep(seq_along(count), count)) %>%
mutate(price = str_replace(price, ",", ".")) %>%
mutate(price = as.double(price)) %>%
inner_join(count(., rid)) %>%
mutate(x = price) %>%
fill(x, .direction = "up") %>%
mutate(price = ifelse(n > 1, x, price)) %>%
select(-c(n, x)) %>% mutate(id = row_number()) %>%
mutate(id = ifelse(is.na(price), NA, id)) %>%
fill(id, .direction = "up") %>%
bind_rows(categories) %>% arrange(rid) %>%
mutate(category = case_when(is.na(id) ~ entry)) %>%
fill(category, .direction = "down") %>%
filter(!is.na(id))
if (length(unique(foods$category)) < 3) {
foods <- mutate(foods, category = NA)
}
recipe <- select(foods, id, entry) %>% group_by(id) %>%
summarise_all(list(~paste(na.omit(.), collapse = " "))) %>%
mutate(recipe_id = map(entry, get_recipe)) %>%
mutate(recipe_id = unlist(recipe_id))
foods <- left_join(foods, recipe)
texts <- bind_rows(texts, categories, foods)
}
texts <- texts %>%
mutate(fid = facs_id)
return(texts)
}
data_url <- "https://gitlab.com/cds19-team/cds19/raw/master/"
img_metadata <- read_csv(paste0(data_url, "Daten/menus.csv")) %>%
mutate(Lokalname_original = str_replace(Dateiname_original, "_.*", "")) %>%
mutate(
Datum = case_when(
nchar(Datum) == 4 ~ paste0("01.01.", Datum),
!is.na(Datum) ~ Datum
)
) %>%
mutate(Kartentyp = str_to_title(str_replace_all(Kartentyp, "-", ""))) %>%
mutate(Kartentyp = str_replace(Kartentyp, " Und ", " und ")) %>%
mutate(Datum  = dmy(Datum)) %>% mutate(Jahr = year(Datum)) %>%
mutate(Lokaltyp = str_replace(Lokaltyp, "Cafe", "Café")) %>%
mutate(
Lokaltyp = case_when(
str_detect(Lokaltyp, "Bar") ~ "Bar",
str_detect(Lokaltyp, "Hotel") ~ "Hotel",
!is.na(Lokaltyp) ~ Lokaltyp,
is.na(Lokaltyp) ~ "Lokal"
)
) %>%
mutate(
Pronomen = case_when(
Lokaltyp %in% c("Gaststätte", "Festhalle") ~ "Die",
Lokaltyp %in% c("Bar", "Disco", "Bürgerstube") ~ "Die",
!is.na(Lokaltyp) ~ "Das"
)
) %>%
drop_na() %>%
arrange(Lokalname, Datum, Kartentyp, Seite) %>%
unite("Text", Pronomen, Lokaltyp, sep = " ")
img_metadata_choices <- unique(img_metadata$Lokalname)
updateSelectInput(
session, "select_restaurant",
select = img_metadata_choices[1],
choices = img_metadata_choices
)
metadata <- read_csv(paste0(data_url, "Daten/restaurants.csv")) %>%
rename(lat = Breitengrad) %>% rename(long = Längengrad) %>%
mutate(
Schließung = case_when(
str_detect(Schließung, "verm") ~ "vmtl. geschlossen",
!is.na(Schließung) ~ "geschlossen"
)
) %>%
mutate(
Eröffnung = case_when(
!is.na(Eröffnung) ~ sprintf("wurde %s eröffnet", Eröffnung)
)
) %>%
mutate(
Schließung = case_when(
!is.na(Schließung) ~ sprintf("ist mittlerweile %s", Schließung)
)
) %>%
inner_join(img_metadata, by = c("Name" = "Lokalname_original")) %>%
select(Lokalname, Eröffnung, Schließung, URL, lat, long) %>% distinct()
save_xml(path = "data/tei.xml")
texts <- readRDS("data/texts.rds")
View(texts)
summary(texts$recipe_id)
texts
get_recipe("Leberkäs")
get_recipe <- function(text, order_by = 2, limit = 1) {
url <- "https://api.chefkoch.de/v2/recipes?" %>%
paste0("minimumRating=4&query=%s&orderBy=%s&limit=%s") %>%
sprintf(URLencode(text), order_by, limit)
content <- GET(url) %>% content()
if (content$count > 0) {
score <- content$results[[1]]$score
if (score > 0.7) {
id <- content$results[[1]]$recipe$id
return(as.integer(id))
}
}
return(NA_integer_)
}
get_recipe("Leberkäs")
get_recipe <- function(text, order_by = 2, limit = 1) {
url <- "https://api.chefkoch.de/v2/recipes?" %>%
paste0("minimumRating=4&query=%s&orderBy=%s&limit=%s") %>%
sprintf(URLencode(text), order_by, limit)
content <- GET(url) %>% content()
if (content$count > 0) {
score <- content$results[[1]]$score
if (score > 0.7) {
return(content$results[[1]]$recipe$id)
}
}
return(NA_character_)
}
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe <- function(text, order_by = 2, limit = 1) {
content <- httr::GET(
url = "https://api.chefkoch.de/v2/recipes",
query = list(
orderBy = order_by,
query = URLencode(text),
minimumRating = "4",
limit = limit
)
) %>% content()
if (content$count > 0) {
score <- content$results[[1]]$score
if (score > 0.7) {
return(content$results[[1]]$recipe$id)
}
}
return(NA_character_)
}
warnings()
get_recipe("Leberkäs")
order_by = 2
limit = 1
text <- "Leberkäs"
httr::GET(
url = "https://api.chefkoch.de/v2/recipes",
query = list(
orderBy = order_by,
query = URLencode(text),
minimumRating = "4",
limit = limit
)
content <- httr::GET(
url = "https://api.chefkoch.de/v2/recipes?",
query = list(
orderBy = order_by,
query = URLencode(text),
minimumRating = "4",
limit = limit
)
) %>% content()
GET(
url = "https://api.chefkoch.de/v2/recipes?",
query = list(
orderBy = order_by,
query = URLencode(text),
minimumRating = "4",
limit = limit
)
)
get_url <- GET(
url = "https://api.chefkoch.de/v2/recipes?",
query = list(
orderBy = order_by,
query = URLencode(text),
minimumRating = "4",
limit = limit
)
)
get_url
get_recipe <- function(text, order_by = 2, limit = 1) {
get_url <- GET(
url = "https://api.chefkoch.de/v2/recipes?",
query = list(
orderBy = order_by,
query = URLencode(text),
minimumRating = "4",
limit = limit
)
)
if (get_url$status_code == 200) {
content <- content(get_url)
if (content$count > 0) {
score <- content$results[[1]]$score
if (score > 0.7) {
return(content$results[[1]]$recipe$id)
}
}
}
return(NA_character_)
}
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe <- function(text, order_by = 2, limit = 1) {
response <- GET(
url = "https://api.chefkoch.de/v2/recipes?",
query = list(
orderBy = order_by,
query = URLencode(text),
minimumRating = "4",
limit = limit
)
)
if (response$status_code == 200) {
content <- content(response)
if (content$count > 0) {
score <- content$results[[1]]$score
if (score > 0.7) {
return(content$results[[1]]$recipe$id)
}
}
}
return(NA_character_)
}
get_recipe("Nudelsuppe")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
get_recipe("Leberkäs")
runApp()
runApp()
runApp()
texts <- readRDS("data/texts.rds")
texts
runApp()
texts <- readRDS("data/texts.rds")
View(texts)
runApp()
runApp()
runApp()
View(food_cart_data)
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id))
add_link <- function(recipe_id) {
url <- sprintf("https://www.chefkoch.de/rezepte/%s/", recipe_id)
button <- url_button("go_to_chefkoch", icon("check-out"), url, FALSE)
return(button)
}
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = map(recipe_id, add_link))
url_button <- function(id, fa_icon, url, tooltip = TRUE) {
url <- sprintf("window.open('%s', '_blank')", url)
if (tooltip) {
button <- tooltip_button(
id = id, fa_icon = fa_icon, onclick = url
)
} else {
button <- actionButton(
id, label = "", icon = fa_icon, onclick = url
)
}
return(button)
}
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = map(recipe_id, add_link))
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = map(recipe_id, add_link)) %>%
mutate(link = unlist(link))
map(food_cart_data$recipe_id, add_link)
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = add_link(recipe_id))
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = case_when(
!is.na(recipe_id) ~ add_link(recipe_id)
))
add_link <- function(recipe_id) {
url <- sprintf("https://www.chefkoch.de/rezepte/%s/", recipe_id)
button <- add_input(
actionButton, "go_to_chefkoch", label = "",
icon = icon("check-out"), onclick = url
)
return(button)
}
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = case_when(
!is.na(recipe_id) ~ add_link(recipe_id)
))
runApp()
runApp()
add_input <- function(FUN, ids, id, class = NULL, ...) {
inputs <- NULL
for (i in ids) {
inputs <- c(inputs, as.character(FUN(paste0(id, i), ...)))
}
if (!is.null(class)) {
inputs <- gsub("btn ", sprintf("btn %s ", class), inputs)
}
return(inputs)
}
add_link <- function(recipe_id) {
url <- sprintf("https://www.chefkoch.de/rezepte/%s/", recipe_id)
button <- add_input(
actionButton, recipe_id, "go_to_chefkoch_", label = "",
icon = icon("check-out"), onclick = url
)
return(button)
}
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = add_link(recipe_id))
na_if(food_cart_data, "") %>%
filter(!is.na(recipe_id)) %>%
mutate(link = add_link(recipe_id)) %>%
mutate(price = as.double(price)) %>%
select(entry, price, link) %>%
rename(Eintrag = entry) %>%
rename(Preis = price)
runApp()
runApp()
runApp()
texts <- readRDS("data/texts.rds")
View(texts)
runApp()
texts <- readRDS("data/texts.rds")
texts
filter(texts, !is.na(id))
filter(texts, !is.na(id)) %>%
mutate(id = paste(id, fid))
filter(texts, !is.na(id)) %>%
mutate(id = paste(id, fid, sep = ":")) %>%
select(entry, id) %>%  group_by(id) %>%
summarise_all(list(~paste(na.omit(.), collapse = " ")))
search_choices <- filter(texts, !is.na(id)) %>%
mutate(id = paste(id, fid, sep = ":")) %>%
select(entry, id) %>%  group_by(id) %>%
summarise_all(
list(~paste(na.omit(.), collapse = " "))
)
search_choices
search_choices <- filter(texts, !is.na(id)) %>%
mutate(id = paste(id, fid, sep = ":")) %>%
select(entry, id) %>%  group_by(id) %>%
summarise_all(
list(~paste(na.omit(.), collapse = " "))
)
search_choices <- setNames(
search_choices$entry,
search_choices$entry
)
search_choices
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
helper_files <- list.files(path = "./helpers", pattern = "*.R")
helper_files <- paste0("helpers/", helper_files)
for (i in seq_along(helper_files)) {
source(helper_files[i], local = TRUE, encoding = "UTF-8")$value
}
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages(c("dplyr", "DT", "fs", "ggthemes", "hexbin", "pillar", "processx", "progress", "raster", "rcmdcheck", "tinytex", "xfun"))
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rsconnect")
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='sschneider',
token='F76D281DDE86D3FA42A2032413898669',
secret='UU5xbbj6w5+M6Fw9weIghAq/hkKuvpr7RqdunvKF')
deployApp()
shiny::runApp()
lines <- readRDS("data/lines.rds")
texts <- readRDS("data/texts.rds")
data_url <- "https://gitlab.com/cds19-team/cds19/raw/master/"
img_metadata <- read_csv(paste0(data_url, "Daten/menus.csv")) %>%
mutate(Lokalname_original = str_replace(Dateiname_original, "_.*", "")) %>%
mutate(
Datum = case_when(
nchar(Datum) == 4 ~ paste0("01.01.", Datum),
!is.na(Datum) ~ Datum
)
) %>%
mutate(Kartentyp = str_to_title(str_replace_all(Kartentyp, "-", ""))) %>%
mutate(Kartentyp = str_replace(Kartentyp, " Und ", " und ")) %>%
mutate(Datum  = dmy(Datum)) %>% mutate(Jahr = year(Datum)) %>%
mutate(Lokaltyp = str_replace(Lokaltyp, "Cafe", "Café")) %>%
mutate(
Lokaltyp = case_when(
str_detect(Lokaltyp, "Bar") ~ "Bar",
str_detect(Lokaltyp, "Hotel") ~ "Hotel",
!is.na(Lokaltyp) ~ Lokaltyp,
is.na(Lokaltyp) ~ "Lokal"
)
) %>%
mutate(
Pronomen = case_when(
Lokaltyp %in% c("Gaststätte", "Festhalle") ~ "Die",
Lokaltyp %in% c("Bar", "Disco", "Bürgerstube") ~ "Die",
!is.na(Lokaltyp) ~ "Das"
)
) %>%
drop_na() %>%
arrange(Lokalname, Datum, Kartentyp, Seite) %>%
unite("Text", Pronomen, Lokaltyp, sep = " ")
metadata <- read_csv(paste0(data_url, "Daten/restaurants.csv")) %>%
rename(lat = Breitengrad) %>% rename(long = Längengrad) %>%
mutate(
Schließung = case_when(
str_detect(Schließung, "verm") ~ "vmtl. geschlossen",
!is.na(Schließung) ~ "geschlossen"
)
) %>%
mutate(
Eröffnung = case_when(
!is.na(Eröffnung) ~ sprintf("wurde %s eröffnet", Eröffnung)
)
) %>%
mutate(
Schließung = case_when(
!is.na(Schließung) ~ sprintf("ist mittlerweile %s", Schließung)
)
) %>%
inner_join(img_metadata, by = c("Name" = "Lokalname_original")) %>%
select(Lokalname, Eröffnung, Schließung, URL, lat, long) %>% distinct()
search_choices <- filter(texts, !is.na(id)) %>%
mutate(id = paste(id, fid, sep = ":")) %>%
select(entry, id) %>%  group_by(id) %>%
summarise_all(
list(~paste(na.omit(.), collapse = " "))
) %>%
sample_n(nrow(.))
search_choices
duplicated(search_choices$entry)
filter(texts, !is.na(id)) %>%
mutate(id = paste(id, fid, sep = ":")) %>%
select(entry, id) %>%  group_by(id) %>%
summarise_all(
list(~paste(na.omit(.), collapse = " "))
) %>%
sample_n(nrow(.))
filter(texts, !is.na(id)) %>%
mutate(id = paste(id, fid, sep = ":")) %>%
select(entry, id) %>%  group_by(id) %>%
summarise_all(
list(~paste(na.omit(.), collapse = " "))
) %>%
sample_n(nrow(.)) %>%
distinct(entry, .keep_all = TRUE)
runApp()
